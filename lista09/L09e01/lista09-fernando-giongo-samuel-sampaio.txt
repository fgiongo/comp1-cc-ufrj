    /* defs.h */

#ifndef DEFS_H
#define DEFS_H
#define FILEPATH "./contatos.txt"
#define MAX_CHARS 40

typedef struct _DATA
{
	int dia, mes, ano;
} data;

typedef struct _CONTATO
{
	struct _CONTATO *prox;
	char nome[MAX_CHARS + 1];
	long telefone;
	data data_de_nascimento;
} contato;
#endif

/* helpers.h */

#include <stdio.h>
#include "defs.h"

int ler_contatos(char *path, contato **lista);
int menu_principal(void);
contato *pesquisar_letra(char c, contato **lista);
int listar_contatos(contato *lista);
contato *pesquisar_nome(char *a_pesquisar, contato **lista);
int remover_contato(char *a_remover, contato **lista);
void inserir_contato(contato **lista);
void imprime_aniversariantes(contato *lista, int mes);
int imprimir_contato(contato *contato);
int lista_enc_inserir(contato *node, contato **lista);
contato *lista_enc_remover(contato **lista);
int salvar_lista(contato *lista, char * path);

/* utils.h */

void input_flush();
int get_int(int min, int max, char * prompt);
long get_long(long min, long max, char * prompt);
char *get_string(int length, char * prompt);
char get_char(char * prompt);

/* helpers.c 
   funções auxiliares relativas a funcionalidades específicas necessárias na main
*/

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include "defs.h"
#include "utils.h"
#include "helpers.h"

int ler_contatos(char *path, contato **lista)
{
    FILE *arquivo;
    contato *novo_contato;
    char c, *str;
    int i;

    arquivo = fopen(FILEPATH, "r");
    if (arquivo == NULL) return 0;

    while ((c = getc(arquivo)) != EOF)
    {
        fseek(arquivo, -1L, SEEK_CUR);
        novo_contato = (contato *)malloc(sizeof(contato));
        if (novo_contato == NULL)
        {
            fclose(arquivo);
            return 0;
        }

        str = (char *)malloc(MAX_CHARS * sizeof(char));
        for (i = 0; (c = fgetc(arquivo)) != '\n'; i++)
            novo_contato->nome[i] = c;

        str[i] = '\0';

        for (i = 0; (c = fgetc(arquivo)) != '\n' || i >= MAX_CHARS; i++)
            str[i] = c;

        str[i] = '\0';
        novo_contato->telefone = atol(str);

        for (i = 0; (c = fgetc(arquivo)) != '\n' || i >= MAX_CHARS; i++)
            str[i] = c;

        str[i] = '\0';
        novo_contato->data_de_nascimento.ano = atoi(str);

        for (i = 0; (c = fgetc(arquivo)) != '\n' || i >= MAX_CHARS; i++)
            str[i] = c;

        str[i] = '\0';
        novo_contato->data_de_nascimento.mes = atoi(str);

        for (i = 0; (c = fgetc(arquivo)) != '\n' || i >= MAX_CHARS; i++)
            str[i] = c;

        str[i] = '\0';
        novo_contato->data_de_nascimento.dia = atoi(str);

        novo_contato->prox = NULL;

        lista_enc_inserir(novo_contato, lista);
    }

    return 1;
}

int menu_principal(void)
{
    char *titulo = "\nMenu Principal\n\n";
    char *a = "(1) inserir contato\n";
    char *b = "(2) remover contato\n";
    char *c = "(3) pesquisar contato por nome\n";
    char *d = "(4) listar todos os contatos\n";
    char *e = "(5) listar contatos cujo nome inicia com dada letra\n";
    char *f = "(6) imprimir aniversariantes do mes\n";
    char *g = "(7) sair\n";

    printf("%s%s%s%s%s%s%s%s\n", titulo, a, b, c, d, e, f, g);

    return get_int(1, 7, "Escolha opcao: ");
}

contato *pesquisar_letra(char c, contato **lista)
{
    contato *lista_temp, *lista_match, *removido;
    lista_temp = lista_match = NULL;

    while ((removido = lista_enc_remover(lista)) != NULL)
    {
        if (removido->nome[0] == c)
            lista_enc_inserir(removido, &lista_match);
        else lista_enc_inserir(removido, &lista_temp);
    }

    while ((removido = lista_enc_remover(&lista_temp)) != NULL)
    {
        lista_enc_inserir(removido, lista);
    }

    return lista_match;
}

int listar_contatos(contato *lista)
{
    
    if (lista == NULL) return 0;

    printf("\nLista de contatos:\n\n");

    while (lista != NULL)
    {
        imprimir_contato(lista);
        printf("\n");
        lista = lista->prox;
    }

    return 1;
}

contato *pesquisar_nome(char *a_pesquisar, contato **lista)
{
    contato *contato_removido, *match, *lista_temp;
    int contato_inserido, nomes_diferentes;

    lista_temp = NULL;
    nomes_diferentes = 1;

    do
    {
        contato_removido = lista_enc_remover(lista);

        contato_inserido = lista_enc_inserir(contato_removido, &lista_temp);

        if (lista_temp != NULL)
            nomes_diferentes = strcmp(a_pesquisar, lista_temp->nome);
    }
    while (contato_inserido && nomes_diferentes);

    if(!nomes_diferentes) match = lista_temp;
    else match = NULL;
  
    while(lista_temp != NULL)
    {
        lista_enc_inserir(lista_enc_remover(&lista_temp), lista);
    }
    
    return match;
}

int remover_contato(char *a_remover, contato **lista)
{
    contato *contato_removido, *lista_temp;
    int contato_inserido, nomes_diferentes;

    nomes_diferentes = 1;
    lista_temp = NULL;

    do
    {
        contato_removido = lista_enc_remover(lista);

        contato_inserido = lista_enc_inserir(contato_removido, &lista_temp);

        if (lista_temp != NULL)
            nomes_diferentes = strcmp(a_remover, lista_temp->nome);

    } while (contato_inserido && nomes_diferentes);

    if (!nomes_diferentes)
    {
        free(lista_enc_remover(&lista_temp));
    }
    else return 0;

    while(lista_temp != NULL)
    {
        lista_enc_inserir(lista_enc_remover(&lista_temp), lista);
    }

    return 1;
}

void inserir_contato(contato **lista)
{
    contato *novo = malloc(sizeof(contato));
    char *nome_novo;

    if (novo == NULL)
    {
        printf("Memória insuficiente.\n");
        exit(1);
    }

    nome_novo = get_string(MAX_CHARS, "Nome: ");
    strcpy(novo->nome, nome_novo);
    free(nome_novo);

    novo->telefone = get_long(0, LONG_MAX, "Telefone (sem espaços ou outros símbolos): ");
    novo->data_de_nascimento.ano = get_int(0, INT_MAX, "Ano de nascimento: ");
    novo->data_de_nascimento.mes = get_int(0, INT_MAX, "Mês de nascimento: ");
    novo->data_de_nascimento.dia = get_int(0, INT_MAX, "Dia de nascimento: ");
    novo->prox = NULL;

    lista_enc_inserir(novo, lista);
}

void imprime_aniversariantes(contato *lista, int mes)
{
    int imprimiu_contato = 0;
    while (lista != NULL)
    {
        if ((lista->data_de_nascimento.mes) == mes)
        {
            printf("\n");
            imprimir_contato(lista);
            imprimiu_contato = 1;
        }

        lista = lista->prox;
    }
    if (!imprimiu_contato) printf("\nNão existem contatos com aniversário no mês %d\n", mes);
}

int imprimir_contato(contato *c)
{
    if (c == NULL) return 0;
    
    printf("Nome: %s\n", c->nome);
    printf("Telefone: %li\n", c->telefone);
    printf("Data de nascimento: %d/%d/%d\n",
            c->data_de_nascimento.dia,
            c->data_de_nascimento.mes,
            c->data_de_nascimento.ano);

    return 1;
}

int lista_enc_inserir(contato *c, contato **lista)
{
    contato *tmp;

    if (c == NULL) return 0;

    tmp = *lista;
    *lista = c;
    c->prox = tmp;

    return 1;
}

contato *lista_enc_remover(contato **lista)
{
    contato *tmp;

    tmp = *lista;

    if (*lista != NULL)
    {
        *lista = (*lista)->prox;
        tmp->prox = NULL;
    }

    return tmp;
}

int salvar_lista(contato *lista, char * path)
{
    FILE *arquivo;
    char *str;

    arquivo = fopen(path, "w");

    if (arquivo == NULL)
        return 0;

    while (lista != NULL)
    {
        str = (char *)malloc(sizeof(char) * MAX_CHARS);

        fputs(lista->nome, arquivo);
        fputc('\n', arquivo);
        
        sprintf(str, "%li", lista->telefone);
        fputs(str, arquivo);
        fputc('\n', arquivo);

        sprintf(str, "%d", lista->data_de_nascimento.ano);
        fputs(str, arquivo);
        fputc('\n', arquivo);

        sprintf(str, "%d", lista->data_de_nascimento.mes);
        fputs(str, arquivo);
        fputc('\n', arquivo);

        sprintf(str, "%d", lista->data_de_nascimento.dia);
        fputs(str, arquivo);
        fputc('\n', arquivo);

        lista = lista->prox;
    }

    free(str);
    fclose(arquivo);
    return 1;
}

/* Nome do arquivo: L09e01.c
 * Data: 29/06/2022
 * Autores: Fernando Giongo e Samuel Sampaio
 * Descricao: O programa gerencia uma agenda de contatos. Cada item da agenda
 * contem nome, telefone e data de aniversario do contato. O programa permite
 * listar contatos e pesquisar contatos por nome e inicial e permite imprimir
 * os aniversariantes do mes.
 */

#include <stdio.h>
#include "defs.h"
#include "utils.h"
#include "helpers.h"

int main(void)
{
    contato *lista_de_contatos, *lista_tmp;
    FILE *arquivo;

    lista_de_contatos = lista_tmp = NULL;

    if (!(ler_contatos(FILEPATH, &lista_de_contatos)))
        printf("Lista de contatos vazia, insira um novo contato\n\n");
    else
        printf("Abrindo lista de contatos...\n\n");

    while (1)
    {
        switch (menu_principal())
        {
        case 1:
            inserir_contato(&lista_de_contatos);

            break;

        case 2:
            if (!remover_contato(
                    get_string(MAX_CHARS, "Nome do contato a remover: "),
                    &lista_de_contatos)) printf("\nContato inexistente\n");
            else
                printf("\nContato removido com sucesso\n");

            break;

        case 3:
            if (!imprimir_contato(
                    pesquisar_nome(

                        get_string(MAX_CHARS, "Pesquisa por nome: "),
                        &lista_de_contatos

                        )))
                printf("\nContato não encontrado\n");

            break;

        case 4:
            if (!listar_contatos(lista_de_contatos))
                printf("Não há contatos\n");

            break;

        case 5:
                lista_tmp = pesquisar_letra(
                        get_char("Inserir inicial: "),
                        &lista_de_contatos);

                listar_contatos(lista_tmp);
                
                printf("listar_contatos concluída\n");

                while (lista_tmp != NULL)
                {
                    lista_enc_inserir(
                            lista_enc_remover(&lista_tmp),
                            &lista_de_contatos);
                }
                
            break;

        case 6:
            imprime_aniversariantes(
                lista_de_contatos,
                get_int(1, 12, "Insira mês de aniversário a procurar: "));

            break;

        case 7:
            if (!(salvar_lista(lista_de_contatos, FILEPATH)))
            {
                printf("Não foi possível salvar arquivo de contatos\n");
            }
            return 0;

        default:
            return 2;
        }
    }
}

/* utils.c 
   funções utilitárias simples e generalistas (não específicas ao programa em si)
*/

#include <stdio.h>
#include <stdlib.h>
#include "utils.h"

void input_flush()
{
	char c;
	c = fgetc(stdin);
	while(c != '\n') c = fgetc(stdin);
}

int get_int(int min, int max, char * prompt)
{
	int i;
	do
	{
		printf("%s", prompt);
		if(!(scanf("%d", &i)))
		{
			input_flush();
			continue;
		}
	}
	while(i < min || i > max);

    input_flush();

	return i;
}

long get_long(long min, long max, char * prompt)
{
	long i;
	do
	{
		printf("%s", prompt);
		if(!(scanf("%li", &i)))
		{
			input_flush();
			continue;
		}
	}
	while(i < min || i > max);

    input_flush();

	return i;
}

char *get_string(int length, char * prompt)
{
    int i;
    char *c;
    printf("%s", prompt);
    c = calloc(length, sizeof(char));
    fgets(c, length, stdin);

    for (i = 0; c[i] != '\0'; i++)
        if (c[i] == '\n') c[i] = '\0';

    return c;
}

char get_char(char * prompt)
{
    char c;

    do
    {
        printf("%s", prompt);
        c = fgetc(stdin);
    }
    while(c == '\n');

    return c;
}
