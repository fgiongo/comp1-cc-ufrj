/* Nome do arquivo: L08e01
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: este programa le as coordenadas de um ponto
 */

#include <stdio.h>

typedef struct _PONTO
{
    float x, y;
} PONTO;

int main (void)
{
    PONTO p;

    printf("Entre com as coordenadas do ponto p\n");
    scanf("%f %f", &p.x, &p.y);
    printf("Dados lidos\n");
    printf("Ponto p: x = %f, y = %f\n", p.x, p.y);
    return 0;
}

/* saida

Entre com as coordenadas do ponto p  
10                                   
20                                   
Dados lidos                          
Ponto p: x = 10.000000, y = 20.000000

*/

/* Nome do arquivo: L08e02
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le a medida e a posicao de um circulo
 */

#include <stdio.h>

typedef struct _PONTO
{
    float x, y;
} PONTO;

typedef struct _CIRCUNFERENCIA
{
    float raio;
    PONTO centro;
} CIRCUNFERENCIA;

int main (void)
{
    CIRCUNFERENCIA c1;

    printf("Entre com o raio do circulo c1\n");
    scanf("%f", &c1.raio);
    printf("Entre com as coordenadas do centro do circulo c1\n");
    scanf("%f %f", &c1.centro.x, &c1.centro.y);
    printf("Dados lidos\n");
    printf("Circulo c1: raio = %f, x = %f, y = %f\n", c1.raio, c1.centro.x,
            c1.centro.y);

    return 0;
}

/* saida

Entre com o raio do circulo c1                          
15                                                      
Entre com as coordenadas do centro do circulo c1        
4                                                       
5                                                       
Dados lidos                                             
Circulo c1: raio = 15.000000, x = 4.000000, y = 5.000000

*/

/* Nome do arquivo: L08e03
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le as coordenadas de dois pontos e imprime a distancia
 * entre eles.
 */

#include <stdio.h>
#include <math.h>

typedef struct _PONTO
{
    float x, y;
} PONTO;

typedef struct _CIRCUNFERENCIA
{
    float raio;
    PONTO centro;
} CIRCUNFERENCIA;

float distancia(PONTO a, PONTO b);

int main (void)
{
    PONTO p1, p2;

    printf("Entre com as coordenadas do ponto p1\n");
    scanf("%f %f", &p1.x, &p1.y);
    printf("Entre com as coordenadas do ponto p2\n");
    scanf("%f %f", &p2.x, &p2.y);

    printf("Distancia entre p1 e p2: %f\n", distancia(p1, p2));

    return 0;
}

float distancia(PONTO a, PONTO b)
{
    return sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2));
}

/* saida

Entre com as coordenadas do ponto p1
1 -2
Entre com as coordenadas do ponto p2
4 2
Distancia entre p1 e p2: 5.000000

*/

/* Nome do arquivo: L08e04
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le as coordenadas de um ponto p1 e os dados de uma
 * circunferencia c1 e imprime se o ponto esta contido dentro da circunferencia
 */

#include <stdio.h>
#include<math.h>

typedef struct _PONTO
{
    float x, y;
} PONTO;

typedef struct _CIRCUNFERENCIA
{
    float raio;
    PONTO centro;
} CIRCUNFERENCIA;

float distancia(PONTO a, PONTO b);

int main (void)
{
    PONTO p1;
    CIRCUNFERENCIA c1;

    printf("Entre com as coordenadas do ponto p1\n");
    scanf("%f %f", &p1.x, &p1.y);

    printf("Entre com o raio do circulo c1\n");
    scanf("%f", &c1.raio);
    printf("Entre com as coordenadas do centro do circulo c1\n");
    scanf("%f %f", &c1.centro.x, &c1.centro.y);

    if (distancia(p1, c1.centro) > c1.raio)
        printf("O ponto est치 fora do circulo\n");
    else printf("O ponto est치 dentro do circulo\n");
    
    return 0;
}

float distancia(PONTO a, PONTO b)
{
    return sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2));
}

/* saida

Entre com as coordenadas do ponto p1                                            
0 0                                                                             
Entre com o raio do circulo c1                                                  
4                                                                               
Entre com as coordenadas do centro do circulo c1                                
3 4                                                                             
O ponto est치 fora do circulo                                                    
          
***

Entre com as coordenadas do ponto p1                                            
1 1                                                                             
Entre com o raio do circulo c1                                                  
4                                                                               
Entre com as coordenadas do centro do circulo c1                                
3 4                                                                             
O ponto est치 dentro do circulo                                                  

*/
/* Nome do arquivo: L08e05
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le duas quantidades de tempo e imprime a maior
 */

#include <stdio.h>

typedef struct _TEMPO
{
    int hora, minuto, segundo;
} TEMPO;

TEMPO ler_tempo(void);
void input_flush(void);

int main (void)
{
    TEMPO t1, t2;

    printf("Entre com tempo t1:\n");
    t1 = ler_tempo();

    printf("Entre com tempo t2:\n");
    t2 = ler_tempo();

    if (t1.hora > t2.hora)
    {
        printf("t1 e' maior\n");
        return 0;
    }
    else if (t2.hora > t1.hora)
    {
        printf("t2 e' maior\n");
        return 0;
    }
    
    if (t1.minuto > t2.minuto)
    {
        printf("t1 e' maior\n");
        return 0;
    }
    else if (t2.minuto > t1.minuto)
    {
        printf("t2 e' maior\n");
        return 0;
    }

    if (t1.segundo > t2.segundo)
    {
        printf("t1 e' maior\n");
        return 0;
    }
    else if (t2.segundo > t1.segundo)
    {
        printf("t2 e' maior\n");
        return 0;
    }
    else
        printf("t1 e t2 sao iguais\n");
    
    return 0;
}

TEMPO ler_tempo(void)
{
    TEMPO tempo;

    do
    {
        printf("Quantidade de horas: ");
        if(!(scanf("%d", &tempo.hora)))
        {
            input_flush();
            continue;
        }
    }
    while(tempo.hora < 0);

    do
    {
        printf("Quantidade de minutos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.minuto))) continue;
    }
    while(tempo.minuto < 0 || tempo.minuto > 59);
    
    do
    {
        printf("Quantidade de segundos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.segundo))) continue;
    }
    while(tempo.segundo < 0 || tempo.segundo > 59);

    return tempo;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

/* saida

Entre com tempo t1:                 
Quantidade de horas: 10             
Quantidade de minutos (max 59): 23  
Quantidade de segundos (max 59): 11 
Entre com tempo t2:                 
Quantidade de horas: 9              
Quantidade de minutos (max 59): 59  
Quantidade de segundos (max 59): 59 
t1 e' maior                         

*/

/* Nome do arquivo: L08e06
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa soma duas quantidades de tempo
 */

#include <stdio.h>

typedef struct _TEMPO
{
    int hora, minuto, segundo;
} TEMPO;

TEMPO ler_tempo(void);
void input_flush(void);
TEMPO soma_tempo(TEMPO a, TEMPO b);

int main (void)
{
    TEMPO t1, t2, t3;

    printf("Entre com tempo t1:\n");
    t1 = ler_tempo();
    
    printf("Entre com tempo t2:\n");
    t2 = ler_tempo();
    
    t3 = soma_tempo(t1, t2);
    printf("t3: %dh:%dmin:%dseg\n", t3.hora, t3.minuto, t3.segundo);

    return 0;
}

TEMPO ler_tempo(void)
{
    TEMPO tempo;

    do
    {
        printf("Quantidade de horas: ");
        if(!(scanf("%d", &tempo.hora)))
        {
            input_flush();
            continue;
        }
    }
    while(tempo.hora < 0);

    do
    {
        printf("Quantidade de minutos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.minuto))) continue;
    }
    while(tempo.minuto < 0 || tempo.minuto > 59);
    
    do
    {
        printf("Quantidade de segundos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.segundo))) continue;
    }
    while(tempo.segundo < 0 || tempo.segundo > 59);

    return tempo;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

TEMPO soma_tempo(TEMPO a, TEMPO b)
{
    TEMPO soma;
    int vai1 = 0;

    soma.segundo = (a.segundo + b.segundo) % 60;
    if ((a.segundo + b.segundo) > 59) vai1 = 1;

    soma.minuto = (a.minuto + b.minuto + vai1) % 60;
    if ((a.minuto + b.minuto + vai1) > 59) vai1 = 1;
    else vai1 = 0;

    soma.hora = a.hora + b.hora + vai1;

    return soma;
}

/* saida

Entre com tempo t1:                 
Quantidade de horas: 10             
Quantidade de minutos (max 59): 53  
Quantidade de segundos (max 59): 42 
Entre com tempo t2:                 
Quantidade de horas: 25             
Quantidade de minutos (max 59): 49  
Quantidade de segundos (max 59): 51 
t3: 36h:43min:33seg                 

*/

/* Nome do arquivo: L08e07
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le dois tempos e os compara para ver qual e' maior
 */

#include <stdio.h>

typedef struct _TEMPO
{
    int hora, minuto, segundo;
} TEMPO;

TEMPO ler_tempo(void);
void input_flush(void);
int compara_tempo(TEMPO a, TEMPO b);

int main (void)
{
    TEMPO t1, t2;

    printf("Entre com tempo t1:\n");
    t1 = ler_tempo();

    printf("Entre com tempo t2:\n");
    t2 = ler_tempo();

    if (compara_tempo(t1, t2) < 0) printf("t2 e' maior\n");
    if (compara_tempo(t1, t2) > 0) printf("t1 e' maior\n");
    if (compara_tempo(t1, t2) == 0) printf("t1 e t2 sao iguais\n");

    return 0;
}

TEMPO ler_tempo(void)
{
    TEMPO tempo;

    do
    {
        printf("Quantidade de horas: ");
        if(!(scanf("%d", &tempo.hora)))
        {
            input_flush();
            continue;
        }
    }
    while(tempo.hora < 0);

    do
    {
        printf("Quantidade de minutos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.minuto))) continue;
    }
    while(tempo.minuto < 0 || tempo.minuto > 59);
    
    do
    {
        printf("Quantidade de segundos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.segundo))) continue;
    }
    while(tempo.segundo < 0 || tempo.segundo > 59);

    return tempo;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

int compara_tempo(TEMPO a, TEMPO b)
{
    if ((a.hora - b.hora) != 0) return a.hora - b.hora;
    if ((a.minuto - b.minuto) != 0) return a.minuto - b.minuto;
    if ((a.segundo - b.segundo) != 0) return a.segundo - b.segundo;
    else return 0;
}

/* saida

Entre com tempo t1:                
Quantidade de horas: 10            
Quantidade de minutos (max 59): 10 
Quantidade de segundos (max 59): 11
Entre com tempo t2:                
Quantidade de horas: 10            
Quantidade de minutos (max 59): 10 
Quantidade de segundos (max 59): 10
t1 e' maior                        

***

Entre com tempo t1:                
Quantidade de horas: 10            
Quantidade de minutos (max 59): 10 
Quantidade de segundos (max 59): 10
Entre com tempo t2:                
Quantidade de horas: 10            
Quantidade de minutos (max 59): 10 
Quantidade de segundos (max 59): 11
t2 e' maior                        

***

Entre com tempo t1:
Quantidade de horas: 10
Quantidade de minutos (max 59): 10
Quantidade de segundos (max 59): 10
Entre com tempo t2:
Quantidade de horas: 10
Quantidade de minutos (max 59): 10
Quantidade de segundos (max 59): 10
t1 e t2 sao iguais

*/

/* Nome do arquivo: L08e08
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le os tempos gastos em ate 50 tarefas as imprime em
 * ordem crescente de tempo gasto
 */

#include <stdio.h>
#include <stdlib.h>

typedef struct _TEMPO
{
    int hora, minuto, segundo;
} TEMPO;

TEMPO ler_tempo(void);
void input_flush(void);
int compara_tempo(TEMPO a, TEMPO b);
int entrada_int(int min, int max, char *prompt);
void sort_tempos(TEMPO *tempo, int dim);
void imprime_tempos(TEMPO *tempo, int dim);

#define MAX 50
#define MAX_32 2147483647

int main (void)
{
    int i, num_tarefas;
    TEMPO *tarefas;

    num_tarefas = entrada_int(0, MAX, "Numero de tarefas (max 50): ");
    tarefas = (TEMPO *) malloc(num_tarefas * sizeof(TEMPO));
    if(!tarefas)
    {
        printf("Sem memoria.\n");
        return 1;
    }
    
    for (i = 0; i < num_tarefas; i++)
    {
        printf("Tempo para tarefa %d:\n", i + 1);
        tarefas[i].hora = entrada_int(0, MAX_32, "Horas: ");
        tarefas[i].minuto = entrada_int(0, 59, "Minutos (max 59): ");
        tarefas[i].segundo = entrada_int(0, 59, "Segundos (max 59): ");
    }

    sort_tempos(tarefas, num_tarefas);
    imprime_tempos(tarefas, num_tarefas);

    return 0;
}

TEMPO ler_tempo(void)
{
    TEMPO tempo;

    do
    {
        printf("Quantidade de horas: ");
        if(!(scanf("%d", &tempo.hora)))
        {
            input_flush();
            continue;
        }
    }
    while(tempo.hora < 0);

    do
    {
        printf("Quantidade de minutos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.minuto))) continue;
    }
    while(tempo.minuto < 0 || tempo.minuto > 59);
    
    do
    {
        printf("Quantidade de segundos (max 59): ");
        input_flush();
        if(!(scanf("%d", &tempo.segundo))) continue;
    }
    while(tempo.segundo < 0 || tempo.segundo > 59);

    return tempo;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

int compara_tempo(TEMPO a, TEMPO b)
{
    if ((a.hora - b.hora) != 0) return a.hora - b.hora;
    if ((a.minuto - b.minuto) != 0) return a.minuto - b.minuto;
    if ((a.segundo - b.segundo) != 0) return a.segundo - b.segundo;
    else return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void sort_tempos(TEMPO *tempo, int dim)
{
    int i, j = 0, changes_made;
    TEMPO buffer;

    do
    {
        j++;
        changes_made = 0;
        for (i = 0; i < dim - j; i++)
        {
            if (compara_tempo(tempo[i], tempo[i + 1]) > 0)
            {
                buffer = tempo[i];
                tempo[i] = tempo[i + 1];
                tempo[i + 1] = buffer;
                changes_made = 1;
            }
        }
    }
    while (changes_made);
}

void imprime_tempos(TEMPO *tempo, int dim)
{
    int i;

    for (i = 0; i < dim; i++)
    {
        printf("Tarefa %d: %dH, %dMIN, %dSEG\n", i + 1, tempo[i].hora,
                tempo[i].minuto, tempo[i].segundo);
    }
}

/* saida

Numero de tarefas (max 50): 5
Tempo para tarefa 1:
Horas: 12
Minutos (max 59): 10
Segundos (max 59): 43
Tempo para tarefa 2:
Horas: 16
Minutos (max 59): 5
Segundos (max 59): 21
Tempo para tarefa 3:
Horas: 8
Minutos (max 59): 10
Segundos (max 59): 20
Tempo para tarefa 4:
Horas: 10
Minutos (max 59): 30
Segundos (max 59): 15
Tempo para tarefa 5:
Horas: 15
Minutos (max 59): 44
Segundos (max 59): 3
Tarefa 1: 8H, 10MIN, 20SEG
Tarefa 2: 10H, 30MIN, 15SEG
Tarefa 3: 12H, 10MIN, 43SEG
Tarefa 4: 15H, 44MIN, 3SEG
Tarefa 5: 16H, 5MIN, 21SEG

*/

/* Nome do arquivo: L08e09
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: este programa recebe de entrada dados de duas circunferencias
 * e informa se elas sao internas, externas, tangentes externas ou secantes
 */

#include <stdio.h>
#include <math.h>

typedef struct _PONTO
{
    float x, y;
} PONTO;

typedef struct _CIRCUNFERENCIA
{
    float raio;
    PONTO centro;
} CIRCUNFERENCIA;

float entrada_float(float min, float max, char *prompt);
void input_flush(void);
float distancia(PONTO a, PONTO b);

#define MAX_VALUE 1000

int main (void)
{
    CIRCUNFERENCIA c1, c2;
    float dist;

    c1.raio = entrada_float(0, MAX_VALUE, "Raio de c1: ");
    c1.centro.x = entrada_float(-MAX_VALUE, MAX_VALUE, "c1: posi칞칚o X: ");
    c1.centro.y = entrada_float(-MAX_VALUE, MAX_VALUE, "c1: posi칞칚o Y: ");

    c2.raio = entrada_float(0, MAX_VALUE, "Raio de c2: ");
    c2.centro.x = entrada_float(-MAX_VALUE, MAX_VALUE, "c2: posi칞칚o X: ");
    c2.centro.y = entrada_float(-MAX_VALUE, MAX_VALUE, "c2: posi칞칚o Y: ");
    
    dist = distancia(c1.centro, c2.centro);

    if (dist - (c1.raio + c2.raio) < 0.00001
            && dist - (c1.raio + c2.raio) > -0.00001)
    {
        printf("Circunferencias tangentes externas.\n");
        return 0;
    }

    if (dist < (c1.raio - c2.raio))
    {
        printf("Uma circunferencia interna a outra\n");
        return 0;
    }

    if (dist < (c1.raio + c2.raio))
    {
        printf("Circunferencias secantes\n");
        return 0;
    }

    if (dist > (c1.raio + c2.raio))
    {
        printf("Circunferencias externas uma a outra\n");
        return 0;
    }
    
    return 0;
}

float entrada_float(float min, float max, char *prompt)
{
    float i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%f", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

float distancia(PONTO a, PONTO b)
{
    return sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2));
}

/* saida

Raio de c1: 4
c1: posi칞칚o X: 5
c1: posi칞칚o Y: 5
Raio de c2: 2
c2: posi칞칚o X: 4
c2: posi칞칚o Y: 4
Uma circunferencia interna a outra

***

Raio de c1: 4
c1: posi칞칚o X: 5
c1: posi칞칚o Y: 5
Raio de c2: 3
c2: posi칞칚o X: -2
c2: posi칞칚o Y: 5
Circunferencias tangentes externas.

***

Raio de c1: 4
c1: posi칞칚o X: 5
c1: posi칞칚o Y: 5
Raio de c2: 3
c2: posi칞칚o X: 1
c2: posi칞칚o Y: 1
Circunferencias secantes

***

Raio de c1: 4
c1: posi칞칚o X: 5
c1: posi칞칚o Y: 5
Raio de c2: 3
c2: posi칞칚o X: -3
c2: posi칞칚o Y: -4
Circunferencias externas uma a outra

*/

/* Nome do arquivo: L08e10
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le os dados de 5 jogadores e os imprime na tela na
 * ordem em que foram lidos
 */

#include <stdio.h>

typedef struct _JOGADOR
{
    int pontos;
    char nome[42];
} JOGADOR;

int entrada_int(int min, int max, char *prompt);
void input_flush(void);

#define MAX_32 2147483647

int main (void)
{
    int i;
    JOGADOR jogadores[5];

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fgets(jogadores[i].nome, 42, stdin);
        jogadores[i].pontos = entrada_int(0, MAX_32, "Pontos: ");
        getchar();
    }
    
    printf("\n\n");

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fputs(jogadores[i].nome, stdout);
        printf("Pontos: ");
        printf("%d\n\n", jogadores[i].pontos);
    }
    return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

/* saida

Dados de jogador 1:
Nome: Jose da Silva
Pontos: 3
Dados de jogador 2:
Nome: Mario de Almeida
Pontos: 5
Dados de jogador 3:
Nome: Luiz Felipe
Pontos: 1
Dados de jogador 4:
Nome: Fernando Giongo
Pontos: 2
Dados de jogador 5:
Nome: Cristiano Ronaldo
Pontos: 4


Dados de jogador 1:
Nome: Jose da Silva
Pontos: 3

Dados de jogador 2:
Nome: Mario de Almeida
Pontos: 5

Dados de jogador 3:
Nome: Luiz Felipe
Pontos: 1

Dados de jogador 4:
Nome: Fernando Giongo
Pontos: 2

Dados de jogador 5:
Nome: Cristiano Ronaldo
Pontos: 4

*/

/* Nome do arquivo: L08e11
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le os dados de 5 jogadores e os imprime na tela em
 * ordem decrescente
 */

#include <stdio.h>

typedef struct _JOGADOR
{
    int pontos;
    char nome[42];
} JOGADOR;

int entrada_int(int min, int max, char *prompt);
void input_flush(void);
void sort_jogadores(JOGADOR *arr, int dim);

#define MAX_32 2147483647

int main (void)
{
    int i;
    JOGADOR jogadores[5];

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fgets(jogadores[i].nome, 42, stdin);
        jogadores[i].pontos = entrada_int(0, MAX_32, "Pontos: ");
        getchar();
    }

    sort_jogadores(jogadores, 5);
    
    printf("\n\n");

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fputs(jogadores[i].nome, stdout);
        printf("Pontos: ");
        printf("%d\n\n", jogadores[i].pontos);
    }
    return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

void sort_jogadores(JOGADOR *arr, int dim)
{
    int i, j = 0, changes_made;
    JOGADOR buffer;

    do
    {
        j++;
        changes_made = 0;
        for (i = 0; i < dim - j; i++)
        {
            if (arr[i].pontos < arr[i + 1].pontos)
            {
                buffer = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = buffer;
                changes_made = 1;
            }
        }
    }
    while (changes_made);
}

/*

Dados de jogador 1:
Nome: Chico Buarque
Pontos: 2
Dados de jogador 2:
Nome: Caetano Veloso
Pontos: 5
Dados de jogador 3:
Nome: Tom Jobim
Pontos: 11
Dados de jogador 4:
Nome: Luiz Melodia
Pontos: 3
Dados de jogador 5:
Nome: Luiz Bonfa
Pontos: 9


Dados de jogador 1:
Nome: Tom Jobim
Pontos: 11

Dados de jogador 2:
Nome: Luiz Bonfa
Pontos: 9

Dados de jogador 3:
Nome: Caetano Veloso
Pontos: 5

Dados de jogador 4:
Nome: Luiz Melodia
Pontos: 3

Dados de jogador 5:
Nome: Chico Buarque
Pontos: 2

*/

/* Nome do arquivo: L08e12
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le os dados de 5 jogadores, os imprime na tela em
 * ordem decrescente, imprime o recordista, remove o jogador com o menor
 * numero de pontos e imprime a nova lista
 */

#include <stdio.h>

typedef struct _JOGADOR
{
    int pontos;
    char nome[42];
} JOGADOR;

int entrada_int(int min, int max, char *prompt);
void input_flush(void);
void sort_jogadores(JOGADOR *arr, int dim);
void nova_lista(JOGADOR *antiga, JOGADOR *nova, int dim_nova);

#define MAX_32 2147483647

int main (void)
{
    int i;
    JOGADOR jogadores[5], jogadores_nova[4];

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fgets(jogadores[i].nome, 42, stdin);
        jogadores[i].pontos = entrada_int(0, MAX_32, "Pontos: ");
        getchar();
    }

    sort_jogadores(jogadores, 5);
    
    printf("\n\n");

    for (i = 0; i < 5; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fputs(jogadores[i].nome, stdout);
        printf("Pontos: ");
        printf("%d\n\n", jogadores[i].pontos);
    }

    nova_lista(jogadores, jogadores_nova, 4);

    printf("Jogador Recordista:\nNome: ");
    fputs(jogadores[0].nome, stdout);
    printf("Pontos: ");
    printf("%d\n\n", jogadores[0].pontos);
    
    printf("Jogador com menor pontuacao eliminado.\nNova lista:\n");
    for (i = 0; i < 4; i++)
    {
        printf("Dados de jogador %d:\nNome: ", i + 1);
        fputs(jogadores_nova[i].nome, stdout);
        printf("Pontos: ");
        printf("%d\n\n", jogadores_nova[i].pontos);
    }
    
    return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

void sort_jogadores(JOGADOR *arr, int dim)
{
    int i, j = 0, changes_made;
    JOGADOR buffer;

    do
    {
        j++;
        changes_made = 0;
        for (i = 0; i < dim - j; i++)
        {
            if (arr[i].pontos < arr[i + 1].pontos)
            {
                buffer = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = buffer;
                changes_made = 1;
            }
        }
    }
    while (changes_made);
}

void nova_lista(JOGADOR *antiga, JOGADOR *nova, int dim_nova)
{
    int i;

    for (i = 0; i < dim_nova; i++)
        nova[i] = antiga[i];
}

/* saida

Dados de jogador 1:
Nome: Machado de Assis
Pontos: 2
Dados de jogador 2:
Nome: Jose Miguel Wisnik
Pontos: 3
Dados de jogador 3:
Nome: Jorge Amado
Pontos: 9
Dados de jogador 4:
Nome: Aluisio Azevedo
Pontos: 1
Dados de jogador 5:
Nome: Ariano Suassuna
Pontos: 5


Dados de jogador 1:
Nome: Jorge Amado
Pontos: 9

Dados de jogador 2:
Nome: Ariano Suassuna
Pontos: 5

Dados de jogador 3:
Nome: Jose Miguel Wisnik
Pontos: 3

Dados de jogador 4:
Nome: Machado de Assis
Pontos: 2

Dados de jogador 5:
Nome: Aluisio Azevedo
Pontos: 1

Jogador Recordista:
Nome: Jorge Amado
Pontos: 9

Jogador com menor pontuacao eliminado.
Nova lista:
Dados de jogador 1:
Nome: Jorge Amado
Pontos: 9

Dados de jogador 2:
Nome: Ariano Suassuna
Pontos: 5

Dados de jogador 3:
Nome: Jose Miguel Wisnik
Pontos: 3

Dados de jogador 4:
Nome: Machado de Assis
Pontos: 2

*/

/* Nome do arquivo: L08e13
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le duas fracoes e imprime a sua soma, subtracao,
 * produto e divisao
 */

#include <stdio.h>
#include <stdlib.h>

typedef struct _FRACAO
{
    int numerador, denominador;
} FRACAO;

int entrada_int(int min, int max, char *prompt);
void input_flush(void);
FRACAO ler_fracao(void);
FRACAO soma(FRACAO a, FRACAO b);
FRACAO subtracao(FRACAO a, FRACAO b);
FRACAO multiplicacao(FRACAO a, FRACAO b);
FRACAO divisao(FRACAO a, FRACAO b);

#define MAX_32 2147483647

int main (void)
{
    FRACAO a, b, resultado;

    printf("Entrada de fracao a:\n");
    a = ler_fracao();
    printf("Entrada de fracao b:\n");
    b = ler_fracao();
    
    printf("\n\n");

    resultado = soma(a, b);
    printf("a + b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = subtracao(a, b);
    printf("a - b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = multiplicacao(a, b);
    printf("a * b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = divisao(a, b);
    printf("a / b = %d / %d\n", resultado.numerador, resultado.denominador);

    return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

FRACAO ler_fracao(void)
{
    FRACAO fracao;

    fracao.numerador = entrada_int(-MAX_32, MAX_32, "Numerador: ");
    fracao.denominador = entrada_int(-MAX_32, MAX_32, "Denominador: ");
    if (fracao.denominador == 0)
    {
        printf("Denominador nao pode ser zero.\n");
        exit(1);
    }

    return fracao;
}

FRACAO soma(FRACAO a, FRACAO b)
{
    FRACAO soma;
    soma.denominador = a.denominador * b.denominador;
    soma.numerador = a.numerador * b.denominador + b.numerador * a.denominador;
    return soma;
}

FRACAO subtracao(FRACAO a, FRACAO b)
{
    FRACAO soma;
    soma.denominador = a.denominador * b.denominador;
    soma.numerador = a.numerador * b.denominador - b.numerador * a.denominador;
    return soma;
}

FRACAO multiplicacao(FRACAO a, FRACAO b)
{
    FRACAO mult;
    mult.denominador = a.denominador * b.denominador;
    mult.numerador = a.numerador * b.numerador;
    return mult;
}

FRACAO divisao(FRACAO a, FRACAO b)
{
    FRACAO div;
    div.denominador = a.denominador * b.numerador;
    div.numerador = a.numerador * b.denominador;
    return div;
}

/* saida

Entrada de fracao a: 
Numerador: 2         
Denominador: 3       
Entrada de fracao b: 
Numerador: 3         
Denominador: 5       
                     
                     
a + b = 19 / 15      
a - b = 1 / 15       
a * b = 6 / 15       
a / b = 10 / 9       

*/

/* Nome do arquivo: L08e14
 * Data: 20/06/2022
 * Autor: Fernando Giongo
 * Descricao: o programa le duas fracoes e imprime a sua soma, subtracao,
 * produto e divisao
 */

#include <stdio.h>
#include <stdlib.h>

typedef struct _FRACAO
{
    int numerador, denominador;
} FRACAO;

int entrada_int(int min, int max, char *prompt);
void input_flush(void);
FRACAO ler_fracao(void);
FRACAO soma(FRACAO a, FRACAO b);
FRACAO subtracao(FRACAO a, FRACAO b);
FRACAO multiplicacao(FRACAO a, FRACAO b);
FRACAO divisao(FRACAO a, FRACAO b);

#define MAX_32 2147483647

int main (void)
{
    FRACAO a, b, resultado;

    printf("Entrada de fracao a:\n");
    a = ler_fracao();
    printf("Entrada de fracao b:\n");
    b = ler_fracao();
    
    printf("\n\n");

    resultado = soma(a, b);
    printf("a + b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = subtracao(a, b);
    printf("a - b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = multiplicacao(a, b);
    printf("a * b = %d / %d\n", resultado.numerador, resultado.denominador);

    resultado = divisao(a, b);
    printf("a / b = %d / %d\n", resultado.numerador, resultado.denominador);

    return 0;
}

int entrada_int(int min, int max, char *prompt)
{
    int i;
    do
    {
        printf("%s", prompt);
        if (!(scanf("%d", &i)))
        {
            input_flush();
            continue;
        }
    }
    while(i < min || i > max);

    return i;
}

void input_flush(void)
{
    int c;
    c = getchar();
    while (c != '\n' && c != '\r' && c != EOF) c = getchar();
}

FRACAO ler_fracao(void)
{
    FRACAO fracao;

    fracao.numerador = entrada_int(-MAX_32, MAX_32, "Numerador: ");
    fracao.denominador = entrada_int(-MAX_32, MAX_32, "Denominador: ");
    if (fracao.denominador == 0)
    {
        printf("Denominador nao pode ser zero.\n");
        exit(1);
    }

    return fracao;
}

FRACAO soma(FRACAO a, FRACAO b)
{
    FRACAO soma;
    soma.denominador = a.denominador * b.denominador;
    soma.numerador = a.numerador * b.denominador + b.numerador * a.denominador;
    return soma;
}

FRACAO subtracao(FRACAO a, FRACAO b)
{
    FRACAO soma;
    soma.denominador = a.denominador * b.denominador;
    soma.numerador = a.numerador * b.denominador - b.numerador * a.denominador;
    return soma;
}

FRACAO multiplicacao(FRACAO a, FRACAO b)
{
    FRACAO mult;
    mult.denominador = a.denominador * b.denominador;
    mult.numerador = a.numerador * b.numerador;
    return mult;
}

FRACAO divisao(FRACAO a, FRACAO b)
{
    FRACAO div;
    div.denominador = a.denominador * b.numerador;
    div.numerador = a.numerador * b.denominador;
    return div;
}

/* saida

Entrada de fracao a: 
Numerador: 2         
Denominador: 3       
Entrada de fracao b: 
Numerador: 3         
Denominador: 5       
                     
                     
a + b = 19 / 15      
a - b = 1 / 15       
a * b = 6 / 15       
a / b = 10 / 9       

*/

